import React from 'react';
import {render} from 'react-dom';
import {CommentList} from './CommentList.js';
import {CommentForm} from './CommentForm.js';
import {ResponseHelper} from './../../../utilities/js/ResponseHelper.js';
import {RequestHelper} from './../../../utilities/js/RequestHelper.js';
import 'whatwg-fetch';
var config = require('config');

export class CommentBox extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: []
    };
    this.handleCommentSubmit = this.handleCommentSubmit.bind(this);
    this.loadCommentsFromServer = this.loadCommentsFromServer.bind(this);
  }

  loadCommentsFromServer() {
    fetch(this.props.url, {
        cache: "no-cache"
      })
      .then(ResponseHelper.checkStatus)
      .then(function(response) {
        response.json().then(function(data){
          this.setState({data: data});
        }.bind(this));

      }.bind(this)).catch(function(error) {
        console.error(this.props.url, status, error.toString());
      }.bind(this));
  }

  componentDidMount() {
    this.loadCommentsFromServer();
  }

  handleCommentSubmit(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    fetch(this.props.url, {
        method: 'POST',
        body: RequestHelper.serialize(comment),
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        cache: "no-cache",
      })
      .then(ResponseHelper.checkStatus)
      .then(function(response) {
        response.json().then(function(data){
          this.setState({data: data});
        }.bind(this));

      }.bind(this)).catch(function(error) {
        this.setState({data: comments});
        console.error(this.props.url, status, error.toString());
      }.bind(this));
  }

  render() {
    return (
      <div className="commentBox">
        <h4>Comments:</h4>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit}/>
      </div>
    );
  }
}

var commentsElement = document.getElementById('comments');
if(commentsElement){
  render(
    <CommentBox url={config.routeBase + "/apiRouter.php?edge=comments"}/>,
    commentsElement
  );
}
